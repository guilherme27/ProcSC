// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2018 17:47:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ProcessadorSingleClock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProcessadorSingleClock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Di;
reg [7:0] In;
reg LE;
reg [3:0] SBA;
reg [3:0] SBB;
reg [3:0] SRD;
reg [7:0] Xh;
reg clk;
// wires                                               
wire [7:0] Out;
wire [7:0] OutA;
wire [7:0] OutB;

// assign statements (if any)                          
ProcessadorSingleClock i1 (
// port map - connection between master ports and signals/registers   
	.Di(Di),
	.In(In),
	.LE(LE),
	.Out(Out),
	.OutA(OutA),
	.OutB(OutB),
	.SBA(SBA),
	.SBB(SBB),
	.SRD(SRD),
	.Xh(Xh),
	.clk(clk)
);
initial 
begin 
#1000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// Di[ 7 ]
initial
begin
	Di[7] = 1'b0;
end 
// Di[ 6 ]
initial
begin
	Di[6] = 1'b0;
end 
// Di[ 5 ]
initial
begin
	Di[5] = 1'b0;
end 
// Di[ 4 ]
initial
begin
	Di[4] = 1'b0;
end 
// Di[ 3 ]
initial
begin
	Di[3] = 1'b1;
end 
// Di[ 2 ]
initial
begin
	Di[2] = 1'b1;
end 
// Di[ 1 ]
initial
begin
	Di[1] = 1'b0;
end 
// Di[ 0 ]
initial
begin
	Di[0] = 1'b0;
end 
// In[ 7 ]
initial
begin
	In[7] = 1'b0;
end 
// In[ 6 ]
initial
begin
	In[6] = 1'b0;
end 
// In[ 5 ]
initial
begin
	In[5] = 1'b0;
end 
// In[ 4 ]
initial
begin
	In[4] = 1'b0;
end 
// In[ 3 ]
initial
begin
	In[3] = 1'b0;
end 
// In[ 2 ]
initial
begin
	In[2] = 1'b0;
end 
// In[ 1 ]
initial
begin
	In[1] = 1'b0;
end 
// In[ 0 ]
initial
begin
	In[0] = 1'b0;
end 
// Xh[ 7 ]
initial
begin
	Xh[7] = 1'b0;
end 
// Xh[ 6 ]
initial
begin
	Xh[6] = 1'b0;
end 
// Xh[ 5 ]
initial
begin
	Xh[5] = 1'b0;
end 
// Xh[ 4 ]
initial
begin
	Xh[4] = 1'b0;
end 
// Xh[ 3 ]
initial
begin
	Xh[3] = 1'b0;
end 
// Xh[ 2 ]
initial
begin
	Xh[2] = 1'b0;
end 
// Xh[ 1 ]
initial
begin
	Xh[1] = 1'b0;
end 
// Xh[ 0 ]
initial
begin
	Xh[0] = 1'b0;
end 

// LE
initial
begin
	LE = 1'b1;
end 
// SRD[ 3 ]
initial
begin
	SRD[3] = 1'b0;
end 
// SRD[ 2 ]
initial
begin
	SRD[2] = 1'b0;
end 
// SRD[ 1 ]
initial
begin
	SRD[1] = 1'b0;
end 
// SRD[ 0 ]
initial
begin
	SRD[0] = 1'b0;
end 
// SBA[ 3 ]
initial
begin
	SBA[3] = 1'b0;
end 
// SBA[ 2 ]
initial
begin
	SBA[2] = 1'b0;
end 
// SBA[ 1 ]
initial
begin
	SBA[1] = 1'b0;
end 
// SBA[ 0 ]
initial
begin
	SBA[0] = 1'b0;
end 
// SBB[ 3 ]
initial
begin
	SBB[3] = 1'b0;
end 
// SBB[ 2 ]
initial
begin
	SBB[2] = 1'b0;
end 
// SBB[ 1 ]
initial
begin
	SBB[1] = 1'b0;
end 
// SBB[ 0 ]
initial
begin
	SBB[0] = 1'b0;
end 
endmodule

